% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trainR.R
\name{generateDiskData}
\alias{generateDiskData}
\title{Generate augmentation data with on disk storage}
\usage{
generateDiskData(
  inputImageList,
  segmentationImageList,
  segmentationNumbers,
  selector,
  addCoordConv = 0,
  segmentationsArePoints = FALSE,
  maskIndex,
  numpynames,
  numberOfSimulations = 16,
  referenceImage = NULL,
  transformType = "rigid",
  noiseModel = "additivegaussian",
  noiseParameters = c(0, 0.002),
  sdSimulatedBiasField = 5e-04,
  sdHistogramWarping = 5e-04,
  sdAffine = 0.2
)
}
\arguments{
\item{inputImageList}{list of lists of input images to warp.  The internal
list sets contains one or more images (per subject) which are
assumed to be mutually aligned.  The outer list contains
multiple subject lists which are randomly sampled to produce
output image list.}

\item{segmentationImageList}{of segmentation images corresponding to the input image list.}

\item{segmentationNumbers}{the integer list of values in the segmentation to model}

\item{selector}{subsets the inputImageList and segmentationImageList (eg to define train test splits)}

\item{addCoordConv}{boolean - generates another array with CoordConv data}

\item{segmentationsArePoints}{boolean - converts segmentations to points}

\item{maskIndex}{the entry within the list of lists that contains a mask}

\item{numpynames}{the names of the numpy on disk files should contain something with
the string mask if using maskIndex and something with the word coordconv if using CC}

\item{numberOfSimulations}{number of output images.  Default = 10.}

\item{referenceImage}{defines the spatial domain for all output images.  If
the input images do not match the spatial domain of the reference image, we
internally resample the target to the reference image.  This could have
unexpected consequences.  Resampling to the reference domain is performed by
testing using \code{antsImagePhysicalSpaceConsistency} then calling
\code{resampleImageToTarget} upon failure.}

\item{transformType}{one of the following options
\code{c( "translation", "rigid", "scaleShear", "affine"," deformation" ,
  "affineAndDeformation" )}.}

\item{noiseModel}{one of the following options
\code{c( "additivegaussian", "saltandpepper", "shot", "speckle" )}}

\item{noiseParameters}{'additivegaussian': \code{c( mean, standardDeviation )},
'saltandpepper': \code{c( probability, saltValue, pepperValue) }, 'shot':
scale, 'speckle': standardDeviation.  Note that the standard deviation,
scale, and probability values are \emph{max} values and are randomly selected
in the range \code{[0, noise_parameter]}.  Also, the "mean", "saltValue" and
pepperValue" are assumed to be in the intensity normalized range of \code{[0, 1]}.}

\item{sdSimulatedBiasField}{Characterize the standard deviation of the amplitude.}

\item{sdHistogramWarping}{Determines the strength of the bias field.}

\item{sdAffine}{Determines the amount of transformation based change}
}
\value{
list of array
}
\description{
Generate augmentation data with on disk storage
}
\examples{
mydf = NULL
}
\author{
Avants BB
}
